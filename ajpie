#!/usr/bin/env python3
'''
ajpie

Demonstration of using the raw types of ajp4py.
'''
import logging
from argparse import ZERO_OR_MORE, ArgumentParser, RawDescriptionHelpFormatter

from ajp4py import AjpAttribute, AjpHeader, get
from textwrap import dedent

DESC = 'Demonstrate ajp4py'


class AjpieDescriptionHelpFormatter(RawDescriptionHelpFormatter):

    def __init__(self, max_help_position=6, *args, **kwargs):
        # A smaller indent for args help.
        kwargs['max_help_position'] = max_help_position
        super(AjpieDescriptionHelpFormatter, self).__init__(*args, **kwargs)

    def _split_lines(self, text, width):
        text = dedent(text).strip() + '\n\n'
        return text.splitlines()

def print_headers(headers):
    for hdr in headers:
        if isinstance(hdr, AjpHeader):
            hdr_nm = hdr.name
        else:
            hdr_nm = hdr
            if isinstance(hdr_nm, bytes):
                hdr_nm = hdr_nm.decode('utf-8')
        hdr_v = headers[hdr]
        if isinstance(hdr_v, bytes):
            hdr_v = hdr_v.decode('utf-8')
        print('{}: {}'.format(hdr_nm, hdr_v))

if __name__ == '__main__':

    parser = ArgumentParser(description=DESC,
                            formatter_class=AjpieDescriptionHelpFormatter)

    parser.add_argument(
        'url',
        type=str,
        metavar='<url>',
        help='Url to resource in the form \'ajp://host[:port][/path]\'.')

    parser.add_argument('req_item', nargs=ZERO_OR_MORE,
                        help=r'''
        Optional input types. Separator indicates type.

        ':'  Headers

             SC_REQ_ACCEPT:*/* Custom-Header:custom-value1,custom-value2

        '==' Query parameters added to the end of the url

             foo==bar el==toro
        ''')
    parser.add_argument('-l', '--logging-level', type=str,
                        metavar='DEBUG|INFO|WARNING|ERROR|CRITICAL',
                        default='WARNING',
                        help='Set logging level (default is WARNING)')
    args = parser.parse_args()

    logging.basicConfig(
        level=getattr(logging, args.logging_level.upper(), None))

    request_headers = {}
    attributes = {}
    query_params = []

    # Fill in request items
    if args.req_item:
        for item in args.req_item:
            if ':' in item:
                split_itm = item.split(':')
                if split_itm[0] in AjpHeader.__members__:
                    request_headers[AjpHeader.__members__[
                        split_itm[0]]] = split_itm[1]
                else:
                    request_headers[split_itm[0]] = split_itm[1]
            elif '==' in item:
                split_itm = item.split('==')
                query_params.append('='.join(split_itm))

    if len(query_params) > 0:
        attributes[AjpAttribute.QUERY_STRING] = '&'.join(query_params)

    AJP_RESP = get(args.url, request_headers=request_headers,
                   attributes=attributes)
    print_headers(AJP_RESP.request.request_headers)
    print_headers(AJP_RESP.headers)
    print(AJP_RESP)
