#        _      _  _
#       (_)    | || |
#   __ _ _ _ __| || |_ _ __  _   _
#  / _` | | '_ \__   _| '_ \| | | |
# | (_| | | |_) | | | | |_) | |_| |
#  \__,_| | .__/  |_| | .__/ \__, |
#      _/ | |         | |     __/ |
#     |__/|_|         |_|    |___/
#
# Logo generated by http://www.kammerl.de/ascii/AsciiSignature.php/

'''
ajp4py Library
==============

ajp4py is an AJP library. It's intent is similar to the Requests
library in that a usable API is presented so that making AJP
reqeusts to servers like Tomcat can be done in an simple
programmatic way.

Sample usage for a GET request to a locally hosted Tomcat servlet
container on port 8009:

.. code-block:: python

  >>> import ajp4py as ajp_requests
  >>> r = ajp_requests.get('ajp://localhost/docs/index.html')
  >>> r.status_code
  200
  >>> 'Apache Tomcat User Guide' in r.content
  True

The other methods supported by AJP are supported, see `ajp4py.api`.
'''
import logging

AJP4PY_LOGGER = logging.getLogger(__name__)
PROTOCOL_LOGGER = logging.getLogger('%s.protocol' % __name__)

from .ajp_types import (AjpAttribute, AjpCommand, AjpHeader,
                        AjpPacketHeadersFromContainer,
                        AjpPacketHeadersToContainer, AjpRequestDirection,
                        AjpSendHeaders, AjpStatus, lookup_status_by_code)
from .api import delete, get, head, options, post, put, request
from .models import ATTRIBUTE, AjpForwardRequest, AjpResponse
